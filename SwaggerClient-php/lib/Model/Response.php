<?php
/**
 * Response
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Recomax REST API
 *
 * Recomax REST API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@recomax.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Response Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Response implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'allowed_methods' => 'string[]',
        'cookies' => 'map[string,\Swagger\Client\Model\NewCookie]',
        'date' => '\DateTime',
        'entity' => 'object',
        'entity_tag' => '\Swagger\Client\Model\EntityTag',
        'headers' => 'map[string,object[]]',
        'language' => '\Swagger\Client\Model\Locale',
        'last_modified' => '\DateTime',
        'length' => 'int',
        'links' => '\Swagger\Client\Model\Link[]',
        'location' => '\Swagger\Client\Model\URI',
        'media_type' => '\Swagger\Client\Model\MediaType',
        'metadata' => 'map[string,object[]]',
        'status' => 'int',
        'status_info' => '\Swagger\Client\Model\StatusType',
        'string_headers' => 'map[string,string[]]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'allowed_methods' => null,
        'cookies' => null,
        'date' => 'date-time',
        'entity' => null,
        'entity_tag' => null,
        'headers' => null,
        'language' => null,
        'last_modified' => 'date-time',
        'length' => 'int32',
        'links' => null,
        'location' => null,
        'media_type' => null,
        'metadata' => null,
        'status' => 'int32',
        'status_info' => null,
        'string_headers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowed_methods' => 'allowedMethods',
        'cookies' => 'cookies',
        'date' => 'date',
        'entity' => 'entity',
        'entity_tag' => 'entityTag',
        'headers' => 'headers',
        'language' => 'language',
        'last_modified' => 'lastModified',
        'length' => 'length',
        'links' => 'links',
        'location' => 'location',
        'media_type' => 'mediaType',
        'metadata' => 'metadata',
        'status' => 'status',
        'status_info' => 'statusInfo',
        'string_headers' => 'stringHeaders'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowed_methods' => 'setAllowedMethods',
        'cookies' => 'setCookies',
        'date' => 'setDate',
        'entity' => 'setEntity',
        'entity_tag' => 'setEntityTag',
        'headers' => 'setHeaders',
        'language' => 'setLanguage',
        'last_modified' => 'setLastModified',
        'length' => 'setLength',
        'links' => 'setLinks',
        'location' => 'setLocation',
        'media_type' => 'setMediaType',
        'metadata' => 'setMetadata',
        'status' => 'setStatus',
        'status_info' => 'setStatusInfo',
        'string_headers' => 'setStringHeaders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowed_methods' => 'getAllowedMethods',
        'cookies' => 'getCookies',
        'date' => 'getDate',
        'entity' => 'getEntity',
        'entity_tag' => 'getEntityTag',
        'headers' => 'getHeaders',
        'language' => 'getLanguage',
        'last_modified' => 'getLastModified',
        'length' => 'getLength',
        'links' => 'getLinks',
        'location' => 'getLocation',
        'media_type' => 'getMediaType',
        'metadata' => 'getMetadata',
        'status' => 'getStatus',
        'status_info' => 'getStatusInfo',
        'string_headers' => 'getStringHeaders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allowed_methods'] = isset($data['allowed_methods']) ? $data['allowed_methods'] : null;
        $this->container['cookies'] = isset($data['cookies']) ? $data['cookies'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
        $this->container['entity_tag'] = isset($data['entity_tag']) ? $data['entity_tag'] : null;
        $this->container['headers'] = isset($data['headers']) ? $data['headers'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['media_type'] = isset($data['media_type']) ? $data['media_type'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_info'] = isset($data['status_info']) ? $data['status_info'] : null;
        $this->container['string_headers'] = isset($data['string_headers']) ? $data['string_headers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowed_methods
     *
     * @return string[]
     */
    public function getAllowedMethods()
    {
        return $this->container['allowed_methods'];
    }

    /**
     * Sets allowed_methods
     *
     * @param string[] $allowed_methods allowed_methods
     *
     * @return $this
     */
    public function setAllowedMethods($allowed_methods)
    {
        $this->container['allowed_methods'] = $allowed_methods;

        return $this;
    }

    /**
     * Gets cookies
     *
     * @return map[string,\Swagger\Client\Model\NewCookie]
     */
    public function getCookies()
    {
        return $this->container['cookies'];
    }

    /**
     * Sets cookies
     *
     * @param map[string,\Swagger\Client\Model\NewCookie] $cookies cookies
     *
     * @return $this
     */
    public function setCookies($cookies)
    {
        $this->container['cookies'] = $cookies;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return object
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param object $entity entity
     *
     * @return $this
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets entity_tag
     *
     * @return \Swagger\Client\Model\EntityTag
     */
    public function getEntityTag()
    {
        return $this->container['entity_tag'];
    }

    /**
     * Sets entity_tag
     *
     * @param \Swagger\Client\Model\EntityTag $entity_tag entity_tag
     *
     * @return $this
     */
    public function setEntityTag($entity_tag)
    {
        $this->container['entity_tag'] = $entity_tag;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return map[string,object[]]
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param map[string,object[]] $headers headers
     *
     * @return $this
     */
    public function setHeaders($headers)
    {
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \Swagger\Client\Model\Locale
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \Swagger\Client\Model\Locale $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\Link[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\Link[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\URI
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\URI $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return \Swagger\Client\Model\MediaType
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param \Swagger\Client\Model\MediaType $media_type media_type
     *
     * @return $this
     */
    public function setMediaType($media_type)
    {
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,object[]]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,object[]] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_info
     *
     * @return \Swagger\Client\Model\StatusType
     */
    public function getStatusInfo()
    {
        return $this->container['status_info'];
    }

    /**
     * Sets status_info
     *
     * @param \Swagger\Client\Model\StatusType $status_info status_info
     *
     * @return $this
     */
    public function setStatusInfo($status_info)
    {
        $this->container['status_info'] = $status_info;

        return $this;
    }

    /**
     * Gets string_headers
     *
     * @return map[string,string[]]
     */
    public function getStringHeaders()
    {
        return $this->container['string_headers'];
    }

    /**
     * Sets string_headers
     *
     * @param map[string,string[]] $string_headers string_headers
     *
     * @return $this
     */
    public function setStringHeaders($string_headers)
    {
        $this->container['string_headers'] = $string_headers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


